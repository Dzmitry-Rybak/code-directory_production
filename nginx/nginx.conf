events {
    worker_connections  1024; # Количество соединений, которое может обрабатывать каждый рабочий процесс
}

http {
    include       mime.types; # Включает файл с определениями MIME-типов
    default_type  application/octet-stream; # Тип содержимого по умолчанию, отправляемый клиенту

    # Логирование
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"'; # Формат лога

    access_log  /var/log/nginx/access.log  main; # Путь к файлу лога доступа
    error_log   /var/log/nginx/error.log; # Путь к файлу лога ошибок

    sendfile        on; # Включает или выключает использование sendfile
    #tcp_nopush     on; # Отправляет HTTP-ответы в одном пакете TCP

    server {
        listen 80;
        server_name code-directory.com www.code-directory.com;
        return 301 https://$host$request_uri;
    }
    # Конфигурация сервера
    server {

        # listen       80; # Порт для прослушивания (HTTP)
        listen 443 ssl;
        server_name  code-directory.com www.code-directory.com ;

        # Сертификаты SSL
        ssl_certificate /etc/nginx/cert/fullchain.pem;
        ssl_certificate_key /etc/nginx/cert/privkey.pem;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
        ssl_prefer_server_ciphers off;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;

        # Настройки HSTS (HTTP Strict Transport Security) - всегда перенаправлять http на https
        add_header Strict-Transport-Security max-age=31536000;

        # Конфигурация для перенаправления запросов с сервера next.js
        location / {
            # пример https://github.com/csrinu236/medium-nextjs-nginx-setup/blob/simple-nginx/docker-compose.yml
            proxy_pass https://next:3000; # вместо NEXTJS_CONTAINER_IP будет next
            add_header X-Custom-HeaderHome "Value for Custom Header Home";
            proxy_set_header Host $http_host; # помогает сохранить оригинальное значение хоста (домена),
        }

        # Конфигурация прокси для API
        location /api/ {
            proxy_pass https://api:5000/; # URL для перенаправления запросов
            proxy_http_version 1.1; # Используемая версия HTTP в прокси
            proxy_set_header Upgrade $http_upgrade; # Передача заголовка Upgrade для WebSocket
            proxy_set_header Connection 'upgrade'; # Обновление соединения
            proxy_set_header Host $host; # Передача оригинального значения хоста
            proxy_cache_bypass $http_upgrade; # Обход кэша для WebSocket
        }
        
        # Максимальный размер тела запроса
        client_max_body_size 100M; # Максимально допустимый размер тела запроса
    }
}
